@using WeeControl.Frontend.Wasm.Layouts.Components
@using WeeControl.Host.WebApiService
@using WeeControl.Host.WebApiService.Contexts.Essentials
@using WeeControl.Host.WebApiService.DeviceInterfaces
@using System.Security.Claims
@using WeeControl.Core.SharedKernel
@inherits LayoutComponentBase
@attribute [AllowAnonymous]

@inject ISecurity Security
@inject IGui Gui
@inject IAuthenticationService UserAuthorizationService
@inject IHomeService Home;

<MudThemeProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudPaper Class="d-flex flex-column flex-grow-1 gap-4" Elevation="5">
    <MudToolBar Elevation="25" Class="d-flex">
        <MudLink Class="d-inline-flex" Href="/">
            <MudImage Src="images/logo.png" Alt="WeeControl" Width="20" Height="20" Style="margin-right: 5px"></MudImage>
        </MudLink>
        @if (isAuthenticated)
        {
            <MudMenu Label="Choose Page">
                <MenuOfCustomerComponent Pages="pages" IsEmployee="@IsEmployee(claims)" IsCustomer="@IsCustomer(claims)"></MenuOfCustomerComponent>
            </MudMenu>
            <MudSpacer></MudSpacer>
            <MudText Align="Align.Start">@fullName</MudText>
            <MudMenu Icon="@Icons.Material.Outlined.Notifications" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" MaxHeight="300">
                <MenuOfNotificationComponent></MenuOfNotificationComponent>
            </MudMenu>
            
            <MudIconButton 
                Icon="@Icons.Material.Outlined.Logout" 
                Color="Color.Primary" Title="Logout"
                OnClick="@UserAuthorizationService.Logout"
            ></MudIconButton>
            
        }
        else
        {
            <MudSpacer></MudSpacer>
            if (Gui.CurrentPageName() != ApplicationPages.Essential.LoginPage)
            {
                <MudIconButton 
                    Icon="@Icons.Material.Outlined.Login" 
                    Color="Color.Primary" Title="Login"
                    OnClick="@(() => Gui.NavigateToAsync(ApplicationPages.Essential.LoginPage))"
                ></MudIconButton>
            }
        }
    </MudToolBar>
    
    <MudPaper Class="d-flex flex-column flex-fill flex-grow-1 gap-4" Elevation="0" Style="margin: 5px">
        @Body
    </MudPaper>
</MudPaper>

@code
{
    bool isAuthenticated;
    string fullName;
    IEnumerable<string> pages;
    IEnumerable<Claim> claims;

     protected override async Task OnInitializedAsync()
    {
         isAuthenticated = await Security.IsAuthenticated();
         fullName = isAuthenticated ? "Hello " + await Home.GetFullName() : string.Empty;
         pages = await Security.GetAllowedPages();
         StateHasChanged();
         claims = (await Security.GetClaimsPrincipal()).Claims;
         await base.OnInitializedAsync();
    }

    private static bool IsEmployee(IEnumerable<Claim> claims)
    {
        return !claims.Select(x => x.Type).Contains(ClaimsValues.ClaimTypes.CustomerTerritory);
    }
    
    private static bool IsCustomer(IEnumerable<Claim> claims)
    {
        return claims.Select(x => x.Type).Contains(ClaimsValues.ClaimTypes.CustomerTerritory);
    }
}
