@using Microsoft.AspNetCore.Components

@attribute [Route(Pages.Essential.UserPage)]
@inject IAuthorizationViewModel AuthorizationViewModel
@inject IUserViewModel UserViewModel

@if (isAuthorized)
{
    <PasswordChangeComponent></PasswordChangeComponent>
}
else
{
    <MudCard Class="flex-fill" Style="max-width: 600px; align-content: center; align-self: center; justify-content: center">
        @switch (currentView)
        {
            case CurrentViews.Login:
                <MudCardHeader>
                                        <h4>Please enter your username and password</h4>
                                    </MudCardHeader>
                <MudCardContent>
                    <EditForm Model="@AuthorizationViewModel" OnValidSubmit="AuthorizationViewModel.Login">
                        <DataAnnotationsValidator/>
                        <div class="form-group">
                            <label>Username or Email</label>
                            <InputText @bind-Value="AuthorizationViewModel.LoginModel.UsernameOrEmail" readonly="@AuthorizationViewModel.IsLoading" class="form-control"/>
                            <ValidationMessage For="@(() => AuthorizationViewModel.LoginModel.UsernameOrEmail)"/>
                        </div>
                        <div class="form-group">
                            <label>Password</label>
                            <InputText @bind-Value="AuthorizationViewModel.LoginModel.Password" readonly="@AuthorizationViewModel.IsLoading" type="password" class="form-control"/>
                            <ValidationMessage For="@(() => AuthorizationViewModel.LoginModel.Password)"/>
                        </div>
                        <MudButton
                            Variant="Variant.Filled"
                            ButtonType="ButtonType.Submit"
                            Color="Color.Primary"
                            Disabled="@AuthorizationViewModel.IsLoading" 
                            Size="Size.Large"
                            Class="ml-auto" @onclick="@AuthorizationViewModel.Login">
                            @if (AuthorizationViewModel.IsLoading)
                            {
                                <span class="spinner-border spinner-border-sm mr-1"></span>
                            }
                            Login
                        </MudButton>
                    </EditForm>
                </MudCardContent>
                break;
            case CurrentViews.Register:
                <EditForm Model="@UserViewModel.CustomerRegisterModel" OnValidSubmit="UserViewModel.Register">
                    <DataAnnotationsValidator/>
                    <MudCard>
                        <MudCardHeader>Personal Details</MudCardHeader>
                        <MudCardContent>
                            <MudGrid>
                                <MudItem xs="3">
                                    <MudTextField Label="First Name" HelperText="Max. 8 characters"
                                                  @bind-Value="UserViewModel.CustomerRegisterModel.Personal.FirstName" For="@(() => UserViewModel.CustomerRegisterModel.Personal.FirstName)"/>
                                </MudItem>
                                <MudItem xs="3">
                                    <MudTextField Label="Second Name" HelperText="Max. 8 characters"
                                                  @bind-Value="UserViewModel.CustomerRegisterModel.Personal.SecondName" For="@(() => UserViewModel.CustomerRegisterModel.Personal.SecondName)"/>
                                </MudItem>
                                <MudItem xs="3">
                                    <MudTextField Label="Third name" HelperText="Max. 8 characters"
                                                  @bind-Value="UserViewModel.CustomerRegisterModel.Personal.ThirdName" For="@(() => UserViewModel.CustomerRegisterModel.Personal.ThirdName)"/>
                                </MudItem>
                                <MudItem xs="3">
                                    <MudTextField Label="Last name" HelperText="Max. 8 characters"
                                                  @bind-Value="UserViewModel.CustomerRegisterModel.Personal.LastName" For="@(() => UserViewModel.CustomerRegisterModel.Personal.LastName)"/>
                                </MudItem>
                            </MudGrid>
                            <MudSelect T="string" Label="Nationality" AnchorOrigin="Origin.BottomCenter" @bind-Value="UserViewModel.CustomerRegisterModel.Personal.Nationality">
                                @foreach (var t in UserViewModel.Countries)
                                {
                                    <MudSelectItem Value="@(t.CountryCode)">@t.CountryCode: @t.CountryName</MudSelectItem>
                                }
                            </MudSelect>
                            <MudSelect T="string" Label="Current Residency" AnchorOrigin="Origin.BottomCenter" @bind-Value="UserViewModel.CustomerRegisterModel.Customer.CountryCode">
                                @foreach (var t in UserViewModel.Countries)
                                {
                                    <MudSelectItem Value="@(t.CountryCode)">@t.CountryCode: @t.CountryName</MudSelectItem>
                                }
                            </MudSelect>
                        </MudCardContent>
                    </MudCard>
                    <MudCard>
                        <MudCardHeader>User Details</MudCardHeader>
                        <MudCardContent>
                            <MudTextField Label="Email" Class="mt-3"
                                          @bind-Value="UserViewModel.CustomerRegisterModel.User.Email" For="@(() => UserViewModel.CustomerRegisterModel.User.Email)"/>
                            <MudTextField Label="Username" HelperText="Max. 8 characters"
                                          @bind-Value="UserViewModel.CustomerRegisterModel.User.Username" For="@(() => UserViewModel.CustomerRegisterModel.User.Username)"/>
                            <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                          @bind-Value="UserViewModel.CustomerRegisterModel.User.Password" For="@(() => UserViewModel.CustomerRegisterModel.User.Password)" InputType="InputType.Password"/>
                            <MudTextField Label="Confirm Password" HelperText="Repeat the password" Class="mt-3"
                                          @bind-Value="UserViewModel.CustomerRegisterModel.User.PasswordConfirmation" For="@(() => UserViewModel.CustomerRegisterModel.User.PasswordConfirmation)" InputType="InputType.Password"/>
                            <MudTextField Label="Mobile Number" HelperText="Max. 8 characters"
                                          @bind-Value="UserViewModel.CustomerRegisterModel.User.MobileNo" For="@(() => UserViewModel.CustomerRegisterModel.User.MobileNo)"/>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
                        </MudCardActions>
                    </MudCard>
                </EditForm>
                break;
            case CurrentViews.ForgotPassword:
                <MudCardHeader>Please enter your username and and email address</MudCardHeader>
                <MudCardContent>
                    <EditForm Model="@UserViewModel.PasswordResetModel" OnValidSubmit="UserViewModel.RequestPasswordReset">
                        <DataAnnotationsValidator/>
                        <div class="form-group">
                            <label>Email</label>
                            <InputText @bind-Value="UserViewModel.PasswordResetModel.Email" type="email" class="form-control"/>
                            <ValidationMessage For="@(() => UserViewModel.PasswordResetModel.Email)"/>
                        </div>
                        <div class="form-group">
                            <label>Username</label>
                            <InputText @bind-Value="UserViewModel.PasswordResetModel.Username" class="form-control"/>
                            <ValidationMessage For="@(() => UserViewModel.PasswordResetModel.Username)"/>
                        </div>
                        <button class="btn btn-primary">
                            @if (UserViewModel.IsLoading)
                            {
                                <span class="spinner-border spinner-border-sm mr-1"></span>
                            }
                            Forgot Password
                        </button>
                    </EditForm>
                </MudCardContent>
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    
        <MudCardActions>
            <MudButton
                Variant="Variant.Filled"
                ButtonType="ButtonType.Submit"
                Color="Color.Primary"
                Disabled="@AuthorizationViewModel.IsLoading" 
                Size="Size.Large"
                Class="ml-auto" @onclick="@(()=> currentView = CurrentViews.Login)">
                @if (AuthorizationViewModel.IsLoading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Login
            </MudButton>
            <MudSpacer></MudSpacer>
            <MudButton
                Variant="Variant.Outlined"
                Color="Color.Default"
                Disabled="@AuthorizationViewModel.IsLoading"
                DisableElevation="true" 
                Size="Size.Small"
                Class="ml-auto align-content-sm-end" 
                @onclick="@(() => currentView = CurrentViews.ForgotPassword)">Forgot Password</MudButton>
            <MudButton
                Variant="Variant.Outlined"
                Color="Color.Default"
                Disabled="@AuthorizationViewModel.IsLoading"
                DisableElevation="true" 
                Size="Size.Small"
                Class="ml-auto align-content-sm-end" 
                @onclick="@(() => currentView = CurrentViews.Register)">Register</MudButton>
        </MudCardActions>
    </MudCard>
}



@code
{
    private bool isAuthorized;
    private CurrentViews currentView;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (await AuthorizationViewModel.IsAuthorized())
        {
            isAuthorized = true;
        }
        else
        {
            isAuthorized = false;
            currentView = CurrentViews.Login;
        }
    }

    enum CurrentViews
    {
        Login, Register, ForgotPassword
    }
}