// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WeeControl.Persistence.Essential;

#nullable disable

namespace WeeControl.Persistence.Migrations
{
    [DbContext(typeof(EssentialDbContext))]
    [Migration("20220604133016_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WeeControl.Domain.Essential.Entities.ClaimDbo", b =>
                {
                    b.Property<Guid>("ClaimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("GrantedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("GrantedTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2022, 6, 4, 13, 30, 16, 563, DateTimeKind.Utc).AddTicks(9280));

                    b.Property<Guid?>("RevokedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("RevokedTs")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("ClaimId");

                    b.HasIndex("GrantedById");

                    b.HasIndex("RevokedById");

                    b.HasIndex("UserId");

                    b.HasIndex("ClaimType", "ClaimValue")
                        .IsUnique();

                    b.ToTable("ClaimDbo", "Essential");
                });

            modelBuilder.Entity("WeeControl.Domain.Essential.Entities.IdentityDbo", b =>
                {
                    b.Property<Guid>("IdentityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CountryId")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserDboUserId")
                        .HasColumnType("uuid");

                    b.HasKey("IdentityId");

                    b.HasIndex("UserDboUserId");

                    b.ToTable("UserIdentities");
                });

            modelBuilder.Entity("WeeControl.Domain.Essential.Entities.SessionDbo", b =>
                {
                    b.Property<Guid>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2022, 6, 4, 13, 30, 16, 564, DateTimeKind.Utc).AddTicks(420));

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("TerminationTs")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("SessionId");

                    b.HasIndex("UserId");

                    b.ToTable("SessionDbo", "Essential");
                });

            modelBuilder.Entity("WeeControl.Domain.Essential.Entities.SessionLogDbo", b =>
                {
                    b.Property<Guid>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Context")
                        .HasColumnType("text");

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2022, 6, 4, 13, 30, 16, 564, DateTimeKind.Utc).AddTicks(1090));

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid");

                    b.HasKey("LogId");

                    b.HasIndex("SessionId");

                    b.ToTable("SessionLogDbo", "Essential");
                });

            modelBuilder.Entity("WeeControl.Domain.Essential.Entities.TerritoryDbo", b =>
                {
                    b.Property<string>("TerritoryId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("ReportToId")
                        .HasColumnType("character varying(10)");

                    b.Property<string>("TerritoryName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("TerritoryId");

                    b.HasIndex("ReportToId");

                    b.HasIndex("CountryCode", "TerritoryName")
                        .IsUnique();

                    b.ToTable("TerritoryDbo", "Essential");

                    b.HasComment("Territory of corporate.");
                });

            modelBuilder.Entity("WeeControl.Domain.Essential.Entities.UserDbo", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("SuspendArgs")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TempPassword")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime?>("TempPasswordTs")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TerritoryId")
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.HasKey("UserId");

                    b.HasIndex("TerritoryId");

                    b.ToTable("UserDbo", "Essential");
                });

            modelBuilder.Entity("WeeControl.Domain.Essential.Entities.ClaimDbo", b =>
                {
                    b.HasOne("WeeControl.Domain.Essential.Entities.UserDbo", "GrantedBy")
                        .WithMany()
                        .HasForeignKey("GrantedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeeControl.Domain.Essential.Entities.UserDbo", "RevokedBy")
                        .WithMany()
                        .HasForeignKey("RevokedById");

                    b.HasOne("WeeControl.Domain.Essential.Entities.UserDbo", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId");

                    b.Navigation("GrantedBy");

                    b.Navigation("RevokedBy");
                });

            modelBuilder.Entity("WeeControl.Domain.Essential.Entities.IdentityDbo", b =>
                {
                    b.HasOne("WeeControl.Domain.Essential.Entities.UserDbo", null)
                        .WithMany("Identities")
                        .HasForeignKey("UserDboUserId");
                });

            modelBuilder.Entity("WeeControl.Domain.Essential.Entities.SessionDbo", b =>
                {
                    b.HasOne("WeeControl.Domain.Essential.Entities.UserDbo", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WeeControl.Domain.Essential.Entities.SessionLogDbo", b =>
                {
                    b.HasOne("WeeControl.Domain.Essential.Entities.SessionDbo", "Session")
                        .WithMany("Logs")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("WeeControl.Domain.Essential.Entities.TerritoryDbo", b =>
                {
                    b.HasOne("WeeControl.Domain.Essential.Entities.TerritoryDbo", "ReportTo")
                        .WithMany("Reporting")
                        .HasForeignKey("ReportToId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ReportTo");
                });

            modelBuilder.Entity("WeeControl.Domain.Essential.Entities.UserDbo", b =>
                {
                    b.HasOne("WeeControl.Domain.Essential.Entities.TerritoryDbo", "Territory")
                        .WithMany("Users")
                        .HasForeignKey("TerritoryId");

                    b.Navigation("Territory");
                });

            modelBuilder.Entity("WeeControl.Domain.Essential.Entities.SessionDbo", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("WeeControl.Domain.Essential.Entities.TerritoryDbo", b =>
                {
                    b.Navigation("Reporting");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WeeControl.Domain.Essential.Entities.UserDbo", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Identities");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
