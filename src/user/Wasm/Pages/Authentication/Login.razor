@page "/Login"
@page "/authentication/login"
@using WeeControl.User.Wasm.Shared
@using Microsoft.AspNetCore.Components
@using WeeControl.User.UserServiceCore.ViewModels.Authentication
@layout RestrictedLayout
@attribute [AllowAnonymous]

@inject LoginViewModel ViewModel
@inject NavigationManager NavManager

<div class="card">
    <h4 class="card-header">@ViewModel.CardHeaderString</h4>
    <div class="card-body">
        <EditForm Model="@ViewModel" OnValidSubmit="ProcessLoginAsync">
            <DataAnnotationsValidator/>
            <div class="form-group">
                <label>@ViewModel.UsernameOrEmailString</label>
                <InputText @bind-Value="ViewModel.UsernameOrEmail" class="form-control"/>
                <ValidationMessage For="@(() => ViewModel.UsernameOrEmail)"/>
            </div>
            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="ViewModel.Password" type="password" class="form-control"/>
                <ValidationMessage For="@(() => ViewModel.Password)"/>
            </div>
            <button class="btn btn-primary">
                @if (ViewModel.IsLoading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Login
            </button>
            <button class="btn btn-secondary" @onclick="@ViewModel.NavigateToForgotMyPasswordPage">Forgot Password</button>
            @* @if (!string.IsNullOrEmpty(stringAlert)) *@
            @* { *@
            @*     <div class="alert alert-danger mt-3 mb-0">@stringAlert</div> *@
            @* } *@
            <button class="btn btn-outline-secondary" @onclick="@ViewModel.NavigateToRegisterPage">Register</button>
        </EditForm>
    </div>
</div>

@code
{
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    protected override async void OnInitialized()
    {
        await base.OnInitializedAsync();
        
        var authenticated = (await AuthState)?.User?.Identity?.IsAuthenticated;
        if (authenticated != null && authenticated == true)
        {
            NavManager.NavigateTo("/Home");
        }
    }

    private async Task ProcessLoginAsync()
    {
        await ViewModel.LoginAsync();
        StateHasChanged();
    }
}