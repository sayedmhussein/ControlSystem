@using WeeControl.User.UserApplication.ViewModels.Authentication
@using WeeControl.User.UserApplication
@attribute [Route(Pages.Authentication.LoginPage)]

@layout RestrictedLayout
@attribute [AllowAnonymous]

@inject LoginViewModel ViewModel

<div class="card">
    <h4 class="card-header">@ViewModel.CardHeaderLabel</h4>
    <div class="card-body">
        <EditForm Model="@ViewModel" OnValidSubmit="ProcessLoginAsync">
            <DataAnnotationsValidator/>
            <div class="form-group">
                <label>@ViewModel.UsernameOrEmailLabel</label>
                <InputText @bind-Value="ViewModel.UsernameOrEmail" readonly="@ViewModel.IsLoading" class="form-control"/>
                <ValidationMessage For="@(() => ViewModel.UsernameOrEmail)"/>
            </div>
            <div class="form-group">
                <label>@ViewModel.PasswordLabel</label>
                <InputText @bind-Value="ViewModel.Password" readonly="@ViewModel.IsLoading" type="password" class="form-control"/>
                <ValidationMessage For="@(() => ViewModel.Password)"/>
            </div>
            <button class="btn btn-primary" disabled="@ViewModel.IsLoading">
                @if (ViewModel.IsLoading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Login
            </button>
            
            <button class="btn btn-secondary" @onclick="@ViewModel.NavigateToForgotMyPasswordPage">@ViewModel.ForgotPasswordButtonLabel</button>
            <button class="btn btn-outline-secondary" @onclick="@ViewModel.NavigateToRegisterPage">@ViewModel.RegisterButtonLabel</button>
        </EditForm>
    </div>
</div>

@code
{
    protected override async void OnInitialized()
    {
        await base.OnInitializedAsync();

        await ViewModel.Init();
    }

    private async Task ProcessLoginAsync()
    {
        await ViewModel.LoginAsync();
    }
}